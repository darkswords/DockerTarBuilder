name: Get-AMD64-Docker-Images-Release

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写docker镜像名称,多个用英文逗号分开'
        required: true
        default: 'openlistteam/openlist:latest'

jobs:
  pull_and_package:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Show Docker login & environment (diagnostic)
        run: |
          echo "Docker version:"
          docker --version || true
          echo "docker info (may require privileges):"
          docker info || true
          echo "Contents of ~/.docker/config.json (should contain auths entry):"
          if [ -f ~/.docker/config.json ]; then
            jq '.' ~/.docker/config.json || cat ~/.docker/config.json
          else
            echo "No ~/.docker/config.json found"
          fi

      - name: Pull Docker Images and Package (with retries)
        env:
          IMAGES: ${{ github.event.inputs.docker_images }}
        run: |
          set -euo pipefail

          # retry helper: runs command up to max attempts with exponential backoff
          retry_cmd() {
            local max_attempts=5
            local attempt=1
            local sleep_time=3
            while true; do
              echo "Attempt #$attempt: $*"
              if "$@"; then
                return 0
              fi
              if [ "$attempt" -ge "$max_attempts" ]; then
                echo "Command failed after $attempt attempts."
                return 1
              fi
              echo "Command failed, sleeping ${sleep_time}s before retry..."
              sleep "$sleep_time"
              attempt=$((attempt+1))
              sleep_time=$((sleep_time * 2))
            done
          }

          IFS=',' read -r -a image_array <<< "$IMAGES"
          for image in "${image_array[@]}"; do
            image=$(echo "$image" | xargs)   # trim spaces
            echo "=== Processing image: $image ==="

            # 先尝试检验 manifest（有助于诊断 503 vs 401）
            echo "Inspecting manifest (diagnostic):"
            retry_cmd docker manifest inspect "$image" || echo "manifest inspect failed (might be normal for some registries)"

            # 拉取镜像（指定平台），加重试
            retry_cmd docker pull --platform linux/amd64 "$image"

            # 文件名替换
            image_name="${image//\//_}"
            image_name="${image_name//:/_}"

            # 保存镜像到 tar
            retry_cmd docker save "$image" -o "${image_name}-amd64.tar"

            # 压缩为 tar.gz（保持 docker load 可用）
            tar -czvf "${image_name}-amd64.tar.gz" "${image_name}-amd64.tar"

            # 删除中间 tar
            rm -f "${image_name}-amd64.tar"
            echo "Saved: ${image_name}-amd64.tar.gz"
          done

      - name: List generated files (debug step)
        run: |
          echo "Generated .tar.gz files:"
          find $GITHUB_WORKSPACE -maxdepth 3 -type f -name "*.tar.gz" -print || true
          release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@master
        with:
          tag_name: DockerTarBuilder-AMD64
          name: ${{ env.RELEASE_NAME }} for x86-64
          body: |
            ### How to use
            `docker load -i alpine_latest-amd64.tar.gz`
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Docker images as release assets
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: DockerTarBuilder-AMD64
          files: ${{ github.workspace }}/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
